-- EonUI Library v2.0 (Fixed Version)
-- Accurate recreation of the eon cheat menu

local EonUI = {}
EonUI.__index = EonUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Theme Configuration
local Theme = {
    Background = Color3.fromRGB(13, 13, 13),
    TabBackground = Color3.fromRGB(20, 20, 20),
    TabActive = Color3.fromRGB(28, 28, 28),
    Border = Color3.fromRGB(40, 40, 40),
    TextPrimary = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(200, 200, 200),
    TextDisabled = Color3.fromRGB(90, 90, 90),
    CheckboxBorder = Color3.fromRGB(192, 192, 192),
    CheckboxChecked = Color3.fromRGB(255, 255, 255)
}

-- Default ESP Colors
local DefaultColors = {
    box = Color3.fromRGB(255, 255, 255),
    health = Color3.fromRGB(0, 255, 0),
    nick = Color3.fromRGB(255, 255, 255),
    weapon = Color3.fromRGB(255, 255, 255),
    ["text,icon"] = Color3.fromRGB(255, 255, 255),
    ammo = Color3.fromRGB(0, 150, 255),
    teammates = Color3.fromRGB(255, 255, 0),
    enabled = Color3.fromRGB(255, 255, 255)
}

-- Utility Functions
local function CreateTween(object, properties, duration)
    local tween = TweenService:Create(
        object,
        TweenInfo.new(duration or 0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

-- HSV to RGB conversion
local function HSVToRGB(h, s, v)
    local r, g, b
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    
    i = i % 6
    
    if i == 0 then
        r, g, b = v, t, p
    elseif i == 1 then
        r, g, b = q, v, p
    elseif i == 2 then
        r, g, b = p, v, t
    elseif i == 3 then
        r, g, b = p, q, v
    elseif i == 4 then
        r, g, b = t, p, v
    elseif i == 5 then
        r, g, b = v, p, q
    end
    
    return Color3.new(r, g, b)
end

-- RGB to HSV conversion
local function RGBToHSV(color)
    local r, g, b = color.R, color.G, color.B
    local max, min = math.max(r, g, b), math.min(r, g, b)
    local h, s, v
    v = max
    
    local d = max - min
    if max == 0 then
        s = 0
    else
        s = d / max
    end
    
    if max == min then
        h = 0
    else
        if max == r then
            h = (g - b) / d
            if g < b then h = h + 6 end
        elseif max == g then
            h = (b - r) / d + 2
        elseif max == b then
            h = (r - g) / d + 4
        end
        h = h / 6
    end
    
    return h, s, v
end

-- Main Window Class
function EonUI.new()
    local self = setmetatable({}, EonUI)
    
    self.Tabs = {}
    self.ActiveTab = nil
    self.Options = {}
    
    -- Create ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "EonUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = UDim2.new(0, 400, 0, 300)
    self.MainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    self.MainFrame.BackgroundColor3 = Theme.Background
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Parent = self.ScreenGui
    
    -- Title Bar
    self.TitleBar = Instance.new("Frame")
    self.TitleBar.Size = UDim2.new(1, 0, 0, 25)
    self.TitleBar.BackgroundColor3 = Theme.Background
    self.TitleBar.BorderSizePixel = 0
    self.TitleBar.Parent = self.MainFrame
    
    -- Title Text
    self.TitleText = Instance.new("TextBox")
    self.TitleText.Text = "eon"
    self.TitleText.Font = Enum.Font.SourceSans
    self.TitleText.TextColor3 = Theme.TextPrimary
    self.TitleText.TextSize = 14
    self.TitleText.BackgroundTransparency = 1
    self.TitleText.Position = UDim2.new(0, 10, 0, 0)
    self.TitleText.Size = UDim2.new(0, 100, 1, 0)
    self.TitleText.TextXAlignment = Enum.TextXAlignment.Left
    self.TitleText.ClearTextOnFocus = false
    self.TitleText.Parent = self.TitleBar
    
    -- Tab Container
    self.TabContainer = Instance.new("Frame")
    self.TabContainer.Size = UDim2.new(1, 0, 0, 30)
    self.TabContainer.Position = UDim2.new(0, 0, 0, 25)
    self.TabContainer.BackgroundColor3 = Theme.TabBackground
    self.TabContainer.BorderSizePixel = 0
    self.TabContainer.Parent = self.MainFrame
    
    -- Content Container
    self.ContentContainer = Instance.new("Frame")
    self.ContentContainer.Size = UDim2.new(1, 0, 1, -55)
    self.ContentContainer.Position = UDim2.new(0, 0, 0, 55)
    self.ContentContainer.BackgroundColor3 = Theme.Background
    self.ContentContainer.BorderSizePixel = 0
    self.ContentContainer.Parent = self.MainFrame
    
    -- Create tabs
    self:CreateTabs()
    
    -- Make draggable
    self:MakeDraggable()
    
    return self
end

-- Create Tabs
function EonUI:CreateTabs()
    local tabNames = {"ragebot", "esp", "visuals", "misc", "exploits", "config"}
    local tabWidth = 60
    
    for i, tabName in ipairs(tabNames) do
        local tab = {}
        
        tab.Button = Instance.new("TextButton")
        tab.Button.Size = UDim2.new(0, tabWidth, 1, 0)
        tab.Button.Position = UDim2.new(0, (i-1) * tabWidth, 0, 0)
        tab.Button.BackgroundColor3 = Theme.TabBackground
        tab.Button.BorderSizePixel = 0
        tab.Button.Font = Enum.Font.SourceSans
        tab.Button.Text = tabName
        tab.Button.TextColor3 = Theme.TextSecondary
        tab.Button.TextSize = 13
        tab.Button.Parent = self.TabContainer
        
        tab.Content = Instance.new("Frame")
        tab.Content.Size = UDim2.new(1, 0, 1, 0)
        tab.Content.BackgroundTransparency = 1
        tab.Content.Visible = false
        tab.Content.Parent = self.ContentContainer
        
        tab.Button.MouseButton1Click:Connect(function()
            self:SelectTab(tab)
        end)
        
        self.Tabs[tabName] = tab
        
        -- Select ESP tab by default
        if tabName == "esp" then
            self:SelectTab(tab)
            self:CreateESPContent(tab.Content)
        end
    end
end

-- Select Tab
function EonUI:SelectTab(tab)
    -- Deselect all tabs
    for _, t in pairs(self.Tabs) do
        t.Button.BackgroundColor3 = Theme.TabBackground
        t.Button.TextColor3 = Theme.TextSecondary
        t.Content.Visible = false
    end
    
    -- Select this tab
    tab.Button.BackgroundColor3 = Theme.TabActive
    tab.Button.TextColor3 = Theme.TextPrimary
    tab.Content.Visible = true
    self.ActiveTab = tab
end

-- Create ESP Content
function EonUI:CreateESPContent(parent)
    local options = {
        "enabled",
        "teammates", 
        "box",
        "health",
        "nick",
        "weapon",
        "text,icon",
        "ammo"
    }
    
    local yOffset = 10
    
    -- Section label
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Text = "player"
    sectionLabel.Font = Enum.Font.SourceSans
    sectionLabel.TextColor3 = Theme.TextPrimary
    sectionLabel.TextSize = 13
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.Position = UDim2.new(0, 15, 0, yOffset)
    sectionLabel.Size = UDim2.new(0, 100, 0, 20)
    sectionLabel.Parent = parent
    
    yOffset = yOffset + 25
    
    for _, optionName in ipairs(options) do
        local option = {}
        option.Name = optionName
        
        -- Container
        option.Container = Instance.new("Frame")
        option.Container.Size = UDim2.new(1, -30, 0, 20)
        option.Container.Position = UDim2.new(0, 15, 0, yOffset)
        option.Container.BackgroundTransparency = 1
        option.Container.Parent = parent
        
        -- Checkbox
        option.Checkbox = Instance.new("TextButton")
        option.Checkbox.Size = UDim2.new(0, 12, 0, 12)
        option.Checkbox.Position = UDim2.new(0, 0, 0.5, -6)
        option.Checkbox.BackgroundColor3 = Theme.Background
        option.Checkbox.BorderSizePixel = 0
        option.Checkbox.Text = ""
        option.Checkbox.Parent = option.Container
        
        local CheckboxBorder = Instance.new("UIStroke")
        CheckboxBorder.Color = Theme.CheckboxBorder
        CheckboxBorder.Thickness = 1
        CheckboxBorder.Parent = option.Checkbox
        
        -- Checkmark
        option.Check = Instance.new("Frame")
        option.Check.Size = UDim2.new(1, -4, 1, -4)
        option.Check.Position = UDim2.new(0.5, 0, 0.5, 0)
        option.Check.AnchorPoint = Vector2.new(0.5, 0.5)
        option.Check.BackgroundColor3 = Theme.CheckboxChecked
        option.Check.BorderSizePixel = 0
        option.Check.Visible = false
        option.Check.Parent = option.Checkbox
        
        -- Label
        option.Label = Instance.new("TextLabel")
        option.Label.Text = optionName
        option.Label.Font = Enum.Font.SourceSans
        option.Label.TextColor3 = Theme.TextPrimary
        option.Label.TextSize = 13
        option.Label.TextXAlignment = Enum.TextXAlignment.Left
        option.Label.BackgroundTransparency = 1
        option.Label.Position = UDim2.new(0, 20, 0, 0)
        option.Label.Size = UDim2.new(0, 150, 1, 0)
        option.Label.Parent = option.Container
        
        -- Color Display
        option.ColorDisplay = Instance.new("TextButton")
        option.ColorDisplay.Size = UDim2.new(0, 40, 0, 14)
        option.ColorDisplay.Position = UDim2.new(1, -45, 0.5, -7)
        option.ColorDisplay.BackgroundColor3 = DefaultColors[optionName] or Color3.fromRGB(255, 255, 255)
        option.ColorDisplay.BorderSizePixel = 0
        option.ColorDisplay.Text = ""
        option.ColorDisplay.Parent = option.Container
        
        local ColorBorder = Instance.new("UIStroke")
        ColorBorder.Color = Theme.Border
        ColorBorder.Thickness = 1
        ColorBorder.Parent = option.ColorDisplay
        
        -- Checkbox functionality
        option.Value = false
        option.Checkbox.MouseButton1Click:Connect(function()
            option.Value = not option.Value
            option.Check.Visible = option.Value
        end)
        
        -- Color picker functionality
        option.ColorDisplay.MouseButton1Click:Connect(function()
            self:CreateColorPicker(option.ColorDisplay, function(color)
                option.ColorDisplay.BackgroundColor3 = color
            end)
        end)
        
        self.Options[optionName] = option
        yOffset = yOffset + 22
    end
end

-- Create Color Picker
function EonUI:CreateColorPicker(button, callback)
    -- Close any existing color picker
    if self.ColorPicker then
        self.ColorPicker:Destroy()
    end
    
    -- Create color picker window
    self.ColorPicker = Instance.new("Frame")
    self.ColorPicker.Size = UDim2.new(0, 200, 0, 220)
    self.ColorPicker.Position = UDim2.new(0, button.AbsolutePosition.X - 200, 0, button.AbsolutePosition.Y)
    self.ColorPicker.BackgroundColor3 = Theme.TabBackground
    self.ColorPicker.BorderSizePixel = 0
    self.ColorPicker.ZIndex = 10
    self.ColorPicker.Parent = self.ScreenGui
    
    local PickerBorder = Instance.new("UIStroke")
    PickerBorder.Color = Theme.Border
    PickerBorder.Thickness = 1
    PickerBorder.Parent = self.ColorPicker
    
    -- Saturation/Value Canvas
    local SVCanvas = Instance.new("Frame")
    SVCanvas.Size = UDim2.new(0, 150, 0, 150)
    SVCanvas.Position = UDim2.new(0, 10, 0, 10)
    SVCanvas.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    SVCanvas.BorderSizePixel = 0
    SVCanvas.Parent = self.ColorPicker
    
    -- Create SV gradient
    local SVGradient1 = Instance.new("UIGradient")
    SVGradient1.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0))
    }
    SVGradient1.Rotation = 90
    SVGradient1.Parent = SVCanvas
    
    local SVOverlay = Instance.new("Frame")
    SVOverlay.Size = UDim2.new(1, 0, 1, 0)
    SVOverlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SVOverlay.BorderSizePixel = 0
    SVOverlay.Parent = SVCanvas
    
    local SVGradient2 = Instance.new("UIGradient")
    SVGradient2.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
    }
    SVGradient2.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1)
    }
    SVGradient2.Parent = SVOverlay
    
    -- SV Cursor
    local SVCursor = Instance.new("Frame")
    SVCursor.Size = UDim2.new(0, 8, 0, 8)
    SVCursor.Position = UDim2.new(0, -4, 0, -4)
    SVCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SVCursor.BorderSizePixel = 1
    SVCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    SVCursor.Parent = SVCanvas
    
    local SVCursorCorner = Instance.new("UICorner")
    SVCursorCorner.CornerRadius = UDim.new(0, 4)
    SVCursorCorner.Parent = SVCursor
    
    -- Hue Slider
    local HueSlider = Instance.new("Frame")
    HueSlider.Size = UDim2.new(0, 20, 0, 150)
    HueSlider.Position = UDim2.new(0, 170, 0, 10)
    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueSlider.BorderSizePixel = 0
    HueSlider.Parent = self.ColorPicker
    
    local HueGradient = Instance.new("UIGradient")
    HueGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    }
    HueGradient.Rotation = 90
    HueGradient.Parent = HueSlider
    
    -- Hue Cursor
    local HueCursor = Instance.new("Frame")
    HueCursor.Size = UDim2.new(1, 4, 0, 4)
    HueCursor.Position = UDim2.new(0, -2, 0, -2)
    HueCursor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueCursor.BorderSizePixel = 1
    HueCursor.BorderColor3 = Color3.fromRGB(0, 0, 0)
    HueCursor.Parent = HueSlider
    
    -- Preview
    local Preview = Instance.new("Frame")
    Preview.Size = UDim2.new(0, 180, 0, 30)
    Preview.Position = UDim2.new(0, 10, 0, 170)
    Preview.BackgroundColor3 = button.BackgroundColor3
    Preview.BorderSizePixel = 0
    Preview.Parent = self.ColorPicker
    
    local PreviewBorder = Instance.new("UIStroke")
    PreviewBorder.Color = Theme.Border
    PreviewBorder.Thickness = 1
    PreviewBorder.Parent = Preview
    
    -- OK Button
    local OKButton = Instance.new("TextButton")
    OKButton.Size = UDim2.new(0, 60, 0, 20)
    OKButton.Position = UDim2.new(0, 130, 0, 195)
    OKButton.BackgroundColor3 = Theme.TabActive
    OKButton.BorderSizePixel = 0
    OKButton.Font = Enum.Font.SourceSans
    OKButton.Text = "OK"
    OKButton.TextColor3 = Theme.TextPrimary
    OKButton.TextSize = 12
    OKButton.Parent = self.ColorPicker
    
    -- Variables
    local h, s, v = RGBToHSV(button.BackgroundColor3)
    local draggingSV = false
    local draggingHue = false
    
    -- Update color
    local function updateColor()
        local color = HSVToRGB(h, s, v)
        SVCanvas.BackgroundColor3 = HSVToRGB(h, 1, 1)
        Preview.BackgroundColor3 = color
    end
    
    -- SV dragging
    SVCanvas.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSV = true
        end
    end)
    
    -- Hue dragging
    HueSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingHue = true
        end
    end)
    
    -- Mouse handling
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if draggingSV then
                local relativeX = math.clamp((input.Position.X - SVCanvas.AbsolutePosition.X) / SVCanvas.AbsoluteSize.X, 0, 1)
                local relativeY = math.clamp((input.Position.Y - SVCanvas.AbsolutePosition.Y) / SVCanvas.AbsoluteSize.Y, 0, 1)
                
                s = relativeX
                v = 1 - relativeY
                
                SVCursor.Position = UDim2.new(relativeX, -4, relativeY, -4)
                updateColor()
            elseif draggingHue then
                local relativeY = math.clamp((input.Position.Y - HueSlider.AbsolutePosition.Y) / HueSlider.AbsoluteSize.Y, 0, 1)
                
                h = relativeY
                
                HueCursor.Position = UDim2.new(0, -2, relativeY, -2)
                updateColor()
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingSV = false
            draggingHue = false
        end
    end)
    
    -- OK button
    OKButton.MouseButton1Click:Connect(function()
        callback(Preview.BackgroundColor3)
        self.ColorPicker:Destroy()
        self.ColorPicker = nil
    end)
    
    -- Close on click outside
    local closeConnection
    closeConnection = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = Players.LocalPlayer:GetMouse()
            local pos = Vector2.new(mouse.X, mouse.Y)
            local abs = self.ColorPicker.AbsolutePosition
            local size = self.ColorPicker.AbsoluteSize
            
            if not (pos.X >= abs.X and pos.X <= abs.X + size.X and 
                    pos.Y >= abs.Y and pos.Y <= abs.Y + size.Y) then
                self.ColorPicker:Destroy()
                self.ColorPicker = nil
                closeConnection:Disconnect()
            end
        end
    end)
    
    -- Set initial positions
    SVCursor.Position = UDim2.new(s, -4, 1-v, -4)
    HueCursor.Position = UDim2.new(0, -2, h, -2)
    updateColor()
end

-- Make window draggable
function EonUI:MakeDraggable()
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    self.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Show/Hide
function EonUI:Show()
    self.ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
end

function EonUI:Hide()
    self.ScreenGui.Parent = nil
end

function EonUI:Toggle()
    if self.ScreenGui.Parent then
        self:Hide()
    else
        self:Show()
    end
end

return EonUI
